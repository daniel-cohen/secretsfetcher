# This is a basic workflow that is manually triggered

name: Manual release workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      version:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Version for the released image'
        # Default value if no value is explicitly provided
        #default: 'World'
        # Input has to be provided for the workflow to run
        required: true

jobs:
  # copied from release.yml ** PLEASE SYNC ALL CHANGES TO THIS JOB WITH release.yml **
  release:
    name: release
    runs-on: ubuntu-18.04
    env:
      SERVICE: secretsfetcher
    steps:
      - name: Set up Go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1

      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Vendor
        run: |
          go mod tidy
          go mod vendor
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Build & Release
        run: |
          # VERSION will be taken from the input parameter:
          VERSION="${{github.event.inputs.version}}"
          IMAGE_NAME="danielco/$SERVICE:$VERSION"
          # exports VERSION env var to next step
          echo "VERSION=${VERSION}" >> $GITHUB_ENV


          # build the docker image:
          docker build --build-arg VERSION=$VERSION -t $IMAGE_NAME .
          docker push $IMAGE_NAME
      - name: Tag Release
        run: |
          REMOTE="https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git"
          git config --local user.email "${GITHUB_ACTOR}@github.com"
          git config --local user.name "${GITHUB_ACTOR}"
          git tag -f -a $VERSION -m "Release ${VERSION}"
          git push ${REMOTE} -f --tags
